=Analysing fuzz data using Burp Intruder=

After you successfully fuzz the targeted Web Application variables, then you would have to do some analysis on the data returned back. You can analyse the results by using the Burp three different features:

  # Grep Match 
  # Grep Extract 
  # Grep Payload

*Note:* These features are found in Burp Intruder TAB -> Options TAB. The results view TAB contains several menus with commands for controlling the attack, and saving the results, server responses and the attack itself. 

== Analysing SQL fuzzing ==

To do that after fuzzing the variables you go to TAB Options and then you process your results using the features mentioned above. One of the most interesting features found in Burp Intruder are the Grep Extract tool. With Grep Extract you use regular expressions in order to identify and extract complex patterns of interest (e.g. Extract a database table) returned from the server or you can use the simple matching fuctionality for extracting simple single word error messages simply to very the existance of an SQL injection.

http://1.bp.blogspot.com/-oQcdNlc6KAg/UFB5SAJExxI/AAAAAAAAA8w/qZEcB67qu_k/s1600/Results3.png

*Note:* Grep Match can help you locate the error messages within the server responses using Burp default list or your own costume error list taken from teenage mutant ninja turtles (the error file payloads).

== Analysing XSS fuzzing results ==

The most appropriate tool for analysing XSS fuzz data but also for extracting SQL filters is Grep Extract:

http://4.bp.blogspot.com/-CKw1f7c3HLY/UFB5h5dJDFI/AAAAAAAAA84/f65LNUj_02Y/s1600/Results4.png

*Note:* Grep Extract can help you extract information from the server responses using Burp expression default list or your own costume expression list taken from teenage mutant ninja turtles (the error file payloads).   

== Analysing XSS fuzzing ==

The most appropriate tool for analysing XSS fuzz data but also for bypassing XSS filters is Grep Payload extractor:

http://4.bp.blogspot.com/-CJUPr0VPFoU/UFB5r_QxclI/AAAAAAAAA9A/E4dPXtBxl9g/s1600/Results5.png

*Note:* Grep Payloads can help you payload information from the server responses using Burp default lists or your own costume list. This feature is particularly useful for XSS attack, because if for example the injected script is echoed back to the user then the server is vulnerable to XSS

==Epilogue==

This post showed that you can increase payload diversity in order to have better results (meaning bypass web application filters). Obfuscated payload tests must be a de facto standard in every penetration engagement. This technique can help you understand what type of payloads you should try to inject while testing a web application and also help you to improve semi manual test by mimicking the behavior of a web application scanner.   