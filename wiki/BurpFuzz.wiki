----
=What is a fuzzer=
----

Fuzzer: A fuzzer is a program that attempts to discover security vulnerabilities by sending random input to an application. If the program contains a vulnerability that can leads to an exception, crash or server error (in the case of web apps), it can be determined that a vulnerability has been discovered. Fuzzers are often termed Fault Injectors for this reason, they generate faults and send them to an application. Generally fuzzers are good at finding buffer overflow, DoS, SQL Injection, XSS, and Format String bugs. They do a poor job at finding vulnerabilites related to information disclosure, encryption flaws and any other vulnerability that does not cause the program to crash.

== Fuzzer payloads and teenage-mutant-ninja-turtles ==

teenage-mutant-ninja-turtles is also a comprehensive set of known attack pattern sequences, predictable locations, and error messages for intelligent brute force testing and exploit condition identification of web applications.

Many mechanisms of attack used to exploit different web server platforms and applications are triggered by particular meta-characters that are observed in more than one product security advisory. fuzzdb is a database attack patterns known to have caused exploit conditions in the past, categorized by attack type, platform, and application.

Because of the popularity of a small number of server types, platforms, and package formats, resources such as log files and administrative directories are typically located in a small number of predictable locations. A comprehensive database of these, sorted by platform type, makes brute force fuzz testing a scalpel-like approach.

== About Burp Intruder ==

Burp Intruder is a tool for automating customized attacks against web applications, to identify and exploit all kinds of security vulnerabilities. Burp Intruder is exceptionally powerful and configurable, and its potential is limited only by your skill and imagination in using it. You can use Intruder to:

  # Performing fuzzing of application requests to identify common vulnerabilities, such as SQL injection, cross-site scripting, and buffer overflows.
  # Enumerate identifiers used within the application, such as account numbers and usernames.
  # Deliver customized brute-force attacks against authentication schemes and session handling mechanisms.
  # Exploit bugs such as broken access controls and information leakage to harvest sensitive data from the application.
  # Perform highly customized discovery of application content in the face of unusual naming schemes or retrieval methods.
  # Carry out concurrency attacks against race conditions, and application-layer denial-of-service attacks.

A typical workflow using Burp Intruder is as follows:

  # Identify an interesting or vulnerable request within any of the Burp Suite tools, and send this to Intruder.
  # Mark the locations in the request where you want to insert payloads.
  # Configure your attack payloads, using Intruder's highly configurable algorithms and preset lists, or your own custom list of payloads.
  # Start the attack and review the detailed results, including all requests made and responses received.
  # Analyze the results to achieve your chosen objective, using customizable filtering and sorting, or by defining your own rules for matching or extracting response data.

== Loading teenage-mutant-ninja-turtles to Burp ==

First we mutate a payload with teenage-mutant-ninja-turtles by following the steps below:


*Example:* Script execution for mutating post fixed SQL injection payload file:

||root# ./tmntv(version).py||Command prompt input|| 
||Usage: Type a single option then press enter type filename press enter again for help type help for the turtle type ban!||Screen output||
||Enter option: pfx ||Screen output|| 
||Enter filename: filename.txt||Screen output||
||Payload is being generated please wait...||Screen output||
||Payload mutation is finished enjoy...||Screen output||
||Bye bye...||Screen output||


Then in order to load teenage-mutant-ninja-turtles to burp you have to go:

||Burp Intruder TAB -> payloads TAB -> Click load button||


 http://4.bp.blogspot.com/-rnROxAkdPAE/T4MiWSFPXCI/AAAAAAAAAIw/HSvMbjjgQV8/s1600/burp.gif

Now that we mutated the payload list we have to feed it in a tool in order to use it later on, so we go to window load the list to burp intruder:

 http://1.bp.blogspot.com/-2egGZIwzcOk/T4MipDygvGI/AAAAAAAAAI4/L58kyrH89CU/s1600/burp1.gif

After we do that we point the payloads to the proper value:

 http://4.bp.blogspot.com/-J3lWJTrsbmA/T4MjPcpvl8I/AAAAAAAAAJA/Qg4mtgfyapU/s1600/burp3.gif 

*Note:* If you see carefully the above image you will see that I am using the sniper mode for the test (best choice when trying to identify initial SQL injection vulnerabilities)

==Different modes of Burp Intruder==

*Sniper*

Sniper mode takes a single input list and uses it against each parameter in turn, leaving the rest of the parameters as their default value. 

*Battering Ram*

Battering Ram also takes a single list but it uses each word against every parameter in a single request.

*Pitchfork*

Pitchfork is similar to Battering Ram but this time taking a list of words per parameter. If the lists do not match in length then the requests will stop when the shorter list runs out. In this example it will make four requests.

*Cluster Bomb*

Finally Cluster Bomb mode, this is the one you would expect to use in this scenario. It takes two lists and runs every word in the first list against every word in the second, i.e. your standard password brute force attack. Four usernames with five passwords makes a total of 20 requests. 

==Epilogue==

This post proved you that teenage-mutant-ninja-turtles can be used very creatively to test a web application, you can very easily use your own mutations. If you want to test for XSS or XML Injections you have obviously to change the char-set in the relevant character set directory of the project. It would be a very good idea to add some statistical analysis and filter out your list in such a way so that more interesting characters in certain positions appear at the top of the list, meaning that it would be a good idea for example to have single quote at the begging of the string and not the end.  

 