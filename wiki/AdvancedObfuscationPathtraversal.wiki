----
=Advanced Directory Traversal filter bypassing=
----

A directory traversal (or path traversal) consists in exploiting insufficient security validation/sanitization of user-supplied input file names, so that characters representing "traverse to parent directory" are passed through to the file APIs. The goal of this attack is to order an application to access a computer file that is not intended to be accessible. This attack exploits a lack of security (the software is acting exactly as it is supposed to) as opposed to exploiting a bug in the code. 

== What really is a Directory Traversal ==

A Path Traversal attack aims to access files and directories that are stored outside the web root folder. By browsing the application, the attacker looks for absolute links to files stored on the web server. By manipulating variables that reference files with “dot-dot-slash (../)” sequences and its variations, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration and critical system files, limited by system operational access control. The attacker uses “../” sequences to move up to root directory, thus permitting navigation through the file system. But what exactly is a Path Traversal vulnerability?  

A Path Traversal is two things:

  # An input validation vulnerability (e.g the application allows the dot-dot-slash characters to pass through).
  # An access control vulnerability (e.g. the application has access to the OS file system with high privileges).

*Note:* OWASP categorizes this type of attack as a hybrid attack, meaning access control and input validation issue.

== Fuzzing for Directory Traversal ==

If your initial attempts to perform a traversal attack (as just described above) are unsuccessful, this does not mean that the application is not vulnerable. Many application developers are aware of path traversal vulnerabilities and implement various kinds of input validation checks in an attempt to prevent them. However, those defenses are often flawed and can be bypassed by a skilled attacker.The first type of input filter commonly encountered involves checking whether the filename parameter contains any path traversal sequences. If it does, the filter either rejects the request or attempts to sanitize the input to remove the sequences. This type of filter is often vulnerable to various attacks that use alter- native encodings and other tricks to defeat the filter.

== Using unicode/UTF-8 for encoding Directory Traversal (The canonicalization problem) ==

UTF-8 was noted as a source of vulnerabilities and attack vectors by Bruce Schneier and Jeffrey Streifling. When Microsoft added Unicode support to their Web server, a new way of encoding ../ was introduced into their code, causing their attempts at Directory Traversal prevention to be circumvented, this technique can also be used to bypass Web Application Firewalls. 

Multiple percent encodings, such as (the characters below translate into the / and \ characters.):

  # %c1%1c
  # %c0%af

*Note:*  In older versions of Windows IIS web server, applications would, by default, run with local system privileges, allowing access to any readable file on the local filesystem. In more recent versions, in common with many other web servers, the server’s process by default runs in a less privileged user context. For this reason, when probing for path traversal vulnerabilities, it is best to request a default file that can be read by any type of user, such as c:\windows\win.ini.

== Overlong UTF-8 Unicode encoding for encoding Directory Traversal ==

  # Dot: %c0%2e, %e0%40%ae, %c0ae
  # Forward slash: %c0%af, %e0%80%af, %c0%2f 
  # Backslash: %c0%5c, %c0%80%5c


*Note:* You can use the illegal Unicode payload type within Burp Intruder to generate a huge number of alternate representations of any given char- acter and submit this at the relevant place within your target parameter. These representations strictly violate the rules for Unicode representa- tion but nevertheless are accepted by many implementations of Unicode decoders, particularly on the Windows platform.

== Using URI encoded Directory Traversal (The canonicalization problem again!) ==

Some web applications scan query string for dangerous characters such as:

  #..
  #..\
  #../

to prevent Directory Traversal. However, the query string is usually URI decoded before use. Therefore these applications are vulnerable to percent encoded Directory Traversal such as:

  # %2e%2e%2f which translates to ../
  # %2e%2e/ which translates to ../
  # ..%2f which translates to ../
  # %2e%2e%5c which translates to ..\

Percent encodings were decoded into the corresponding 8-bit characters by Microsoft webserver. This has historically been correct behavior as Windows and DOS traditionally used canonical 8-bit characters sets based upon ASCII. However, the original UTF-8 was not canonical, and several strings were now string encodings translatable into the same string. Microsoft performed the anti-traversal checks without UTF-8 canonicalization, and therefore not noticing that (HEX) C0AF and (HEX) 2F were the same character when doing string comparisons. Malformed percent encodings, such as %c0%9v was also utilized.

== Using 16-bit Unicode encoding ==

  # Dot: %u002e
  # Forward slash: %u2215
  # Backslash: %u2216

== Using URL encoding ==

URL encoding a Directory Traversal payloads would have similar side effects as with the SQL Injection payload URL encoding, as far as the Web Application filter or firewall is concerned. Simple URL-encoded representations of traversal sequences would look like this:

  # Dot: %2e 
  # Forward slash: %2f 
  # Backslash: %5c

*Note:* You can either use the Teenage Mutant Ninja Turtles Project to do these mutations, Burp Decoder or an online URL encoder at [http://meyerweb.com/eric/tools/dencoder/].  

== Using double URL encoding ==

Double URL encoding a Directory Traversal payloads would also have similar side effects as with the SQL Injection payload double URL encoding, as far as the Web Application filter or firewall is concerned. Double URL-encoded representations of traversal sequences would look like this:

  # Dot: .
  # Forward slash: %252F
  # Backslash: %255C

*Note:* You can either use the Teenage Mutant Ninja Turtles Project to do these mutations, Burp Decoder or an online URL encoder at [http://meyerweb.com/eric/tools/dencoder/].  

== Methods to prevent Directory Traversal ==

A possible algorithm for preventing Directory Traversal would be to:

  # Process URI requests that do not result in a file request, e.g., executing a hook into user code, before continuing below.
  # When a URI request for a file/directory is to be made, build a full path to the file/directory if it exists, and normalize all characters (e.g., %20 converted to spaces).
  # It is assumed that a 'Document Root' fully qualified, normalized, path is known, and this string has a length N. Assume that no files outside this directory can be served.
  # Ensure that the first N characters of the fully qualified path to the requested file is exactly the same as the 'Document Root'.
  # If so, allow the file to be returned.
  # If not, return an error, since the request is clearly out of bounds from what the web-server should be allowed to serve.
  # Check if the string contains '..' (two periods next to each other).

*Note:* Using a hard-coded predefined file extension to suffix the path may limit the scope of the attack to files of that file extension.