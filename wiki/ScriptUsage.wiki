= How to use the pay load mutator =

You can use the payload mutator to help you bypass badly implemented SQL injection filters, by increasing your payload diversity e.g. include characters that PHP functions cannot handle very well, apply multiple layers of encoding to your payloads and to perform DoS to the Web Application e.t.c.  

== Script usage ==

In order to run the scripts you would have to have installed python, which by the way you can download from here:http://www.python.org/getit/. The tool was tested and developed using Python 2.6.1, but earlier versions higher than Python 2.5 should not have problem executing the script properly. Now in order to run the script just execute it by typing in a Linux, Unix or Mac command prompt  ./tmntv(version).py and for Windows simply type tmntv(version).py. After you do that the following usage help message will be printed to your screen:


||Usage: Type a single option then press enter type file name press enter again for help type help for the turtle type ban!||

*Note* The script will exit after printing this message.

== Script options ==

The following table shows the help message along with a short explanation of each option.

|| *Options* || *Functionality description* ||
|| help    ||   Print help message for script arguments ||
|| sfx     ||   For mutating SQL injection attack strings by adding suffixes to the payloads e.g EXEC, ';-- e.t.c ||
|| pfx     ||   For mutating SQL injection attack strings by adding postfixes to the payloads e.g. --, );-- e.t.c ||
|| url     ||   For mutating SQL injection attack strings by url encoding the payloads ||
|| flr     ||   For mutating SQL injection attack strings by filling the gaps with SQL commends, url encoded space and other special characters ||
|| b64     ||   For mutating attack strings by base 64 encoding the payloads ||
|| hex  ||   For mutating SQL injection attack strings by hex encoding the payloads ||
|| ban  ||   Print ThE script banner ||
|| ver  ||   Print version of the script ||
|| all  ||   Performing all mutations ||
|| ded  ||   Deduplicate all attack strings payloads ||
|| var  ||   For mutating SQL injection attack strings by adding case variation the payloads ||

== Script Examples ==

*Example 1:* Script execution for generating suffixed SQL injection payload file:

||root# ./tmntv(version).py||Command prompt input|| 
||Usage: Type a single option then press enter type filename press enter again for help type help for the turtle type ban!||Screen output||
||Enter option: sfx ||Screen output|| 
||Enter filename: filename.txt||Screen output||
||Payload is being generated please wait...||Screen output||
||Payload mutation is finished enjoy...||Screen output||
||Bye bye...||Screen output||


*Note:*The tool after properly executed will generate a file named after the mutation type and the current time so you can track the generated payloads, the file name would look like this Tue04Sep18_15_16_suffixedPayloads.lst. 

*Example 2:* Script execution for generating post fixed SQL injection payload file:

||root# ./tmntv(version).py||Command prompt input|| 
||Usage: Type a single option then press enter type filename press enter again for help type help for the turtle type ban!||Screen output||
||Enter option: pfx ||Screen output|| 
||Enter filename: filename.txt||Screen output||
||Payload is being generated please wait...||Screen output||
||Payload mutation is finished enjoy...||Screen output||
||Bye bye...||Screen output||


*Note:*The tool after properly executed will generate a file named after the mutation type and the current time so you can track the generated payloads, the file name would look like this Tue04Sep18_15_11_postfixedPayloads.lst.

*Example 3:* Script execution for generating all SQL injection mutations:

||root# ./tmntv(version).py||Command prompt input|| 
||Usage: Type a single option then press enter type filename press enter again for help type help for the turtle type ban!||Screen output||
||Enter option: all ||Screen output|| 
||Enter filename: filename.txt||Screen output||
||Payload is being generated please wait...||Screen output||
||----- Payload generated ----||Screen output||
||----- Payload generated ----||Screen output||
||----- Payload generated ----||Screen output||
||----- Payload generated ----||Screen output||
||----- Payload generated ----||Screen output||
||----- Payload generated ----||Screen output||
||----- Payload generated ----||Screen output||
||Payload mutation is finished enjoy...||Screen output||
||Bye bye...||Screen output||


*Note:*The tool after properly executed will generate a seven files named after the mutation type and the current time so you can track the generated payloads, the file names would look like this: 

  # Tue04Sep18_15_11_postfixedPayloads.lst
  # Tue04Sep18_15_16_suffixedPayloads.lst
  # Tue04Sep18_15_21_spaceFilledPayloads.lst
  # Tue04Sep18_15_26_urlEncodedPayloads.lst